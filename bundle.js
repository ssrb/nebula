(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var __extends=this&&this.__extends||function(e,t){function r(){this.constructor=e}for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o]);e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},seedrandom=require("./bower_components/seedrandom/seedrandom.min.js"),Billboards=function(e){function t(t,r,o,n,i,s,a,c){var d=new THREE.TextureLoader,E=d.load(r);e.call(this,new THREE.Geometry,new THREE.MeshBasicMaterial);for(var l=seedrandom(t),h=0;h<o;++h){var p=n.sample(),m=l(),T=s+(i-s)*m,w=new THREE.Mesh(new THREE.PlaneGeometry(T,T),new THREE.MeshBasicMaterial({color:c.clone().lerp(a,m).getHex(),side:THREE.FrontSide,map:E,transparent:!0,depthTest:!1,depthWrite:!1}));w.position.x=p.x,w.position.y=p.y,w.position.z=p.z,w.lookAt(new THREE.Vector3(0,0,0)),w.updateMatrix(),w.matrixAutoUpdate=!1,this.add(w)}}return __extends(t,e),t.prototype.animate=function(e){var t=new THREE.Vector3,r=new THREE.Vector3,o=new THREE.Vector3;e.matrixWorld.extractBasis(t,r,o);for(var n=new THREE.Vector3,i=new THREE.Vector3,s=new THREE.Vector3,a=0;a<this.children.length;++a){this.children[a].matrix.extractBasis(n,i,s);var c=this.children[a].getWorldPosition();n.crossVectors(r,s),n.normalize(),i.crossVectors(s,n),this.children[a].matrix.makeBasis(n,i,s),this.children[a].matrix.setPosition(c)}},t}(THREE.Mesh);exports.Billboards=Billboards;

},{"./bower_components/seedrandom/seedrandom.min.js":3}],2:[function(require,module,exports){
Blockly.Blocks.starsystem={init:function(){this.appendDummyInput().appendField("Star System"),this.appendStatementInput("Layers").setCheck("Layer"),this.setColour(290),this.setTooltip(""),this.setHelpUrl("http://www.example.com/")}},Blockly.Blocks.gas={init:function(){this.appendDummyInput().setAlign(Blockly.ALIGN_CENTRE).appendField("Gas"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Inner color").appendField(new Blockly.FieldColour("#000000"),"INNER_COLOR"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Outer color").appendField(new Blockly.FieldColour("#3366ff"),"OUTER_COLOR"),this.appendValueInput("MIX").setCheck(null).setAlign(Blockly.ALIGN_RIGHT).appendField("Mix (noise)"),this.setPreviousStatement(!0,["Nebula","Layer"]),this.setNextStatement(!0,"Layer"),this.setColour(20),this.setTooltip(""),this.setHelpUrl("http://www.example.com/")}},Blockly.Blocks.dwarf_stars={init:function(){this.appendDummyInput().setAlign(Blockly.ALIGN_CENTRE).appendField("Dwarf Stars"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Seed").appendField(new Blockly.FieldTextInput("Gliese 623"),"SEED"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Cardinality").appendField(new Blockly.FieldNumber(2e3,0),"CARDINALITY"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Size").appendField(new Blockly.FieldNumber(.001,0),"SIZE"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Near color").appendField(new Blockly.FieldColour("#ff6600"),"NEAR_COLOR"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Far color").appendField(new Blockly.FieldColour("#000066"),"FAR_COLOR"),this.appendValueInput("MASK").setCheck("Mask").setAlign(Blockly.ALIGN_RIGHT).appendField("Mask"),this.setPreviousStatement(!0,["Nebula","Layer"]),this.setNextStatement(!0,"Layer"),this.setColour(20),this.setTooltip(""),this.setHelpUrl("http://www.example.com/")}},Blockly.Blocks.giant_stars={init:function(){this.appendDummyInput().setAlign(Blockly.ALIGN_CENTRE).appendField("Giant Stars"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Seed").appendField(new Blockly.FieldTextInput("entropy"),"SEED"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Cardinality").appendField(new Blockly.FieldNumber(100,0),"CARDINALITY"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Near size").appendField(new Blockly.FieldNumber(0,0),"NEAR_SIZE"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Far size").appendField(new Blockly.FieldNumber(0,0),"FAR_SIZE"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Near color").appendField(new Blockly.FieldColour("#ff6600"),"NEAR_COLOR"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Far color").appendField(new Blockly.FieldColour("#3366ff"),"FAR_COLOR"),this.appendDummyInput().appendField("Texture").appendField(new Blockly.FieldDropdown([["default","default"],["flare-blue-purple1","flare-blue-purple1"],["flare-blue-purple2","flare-blue-purple2"],["flare-blue-purple3","flare-blue-purple3"],["flare-blue-spikey1","flare-blue-spikey1"],["flare-green1","flare-green1"],["flare-inverted-blue-purple3","flare-inverted-blue-purple3"],["flare-red1","flare-red1"],["flare-red-yellow1","flare-red-yellow1"],["flare-white-small1","flare-white-small1"],["sun","sun"]]),"TEXTURE"),this.appendValueInput("MASK").setCheck("Mask").setAlign(Blockly.ALIGN_RIGHT).appendField("Mask"),this.setPreviousStatement(!0,["Nebula","Layer"]),this.setNextStatement(!0,"Layer"),this.setColour(290),this.setTooltip(""),this.setHelpUrl("http://www.example.com/")}},Blockly.Blocks.fbm_noise={init:function(){this.appendDummyInput().setAlign(Blockly.ALIGN_CENTRE).appendField("Fractal Brownian motion noise"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Seed").appendField(new Blockly.FieldTextInput("I ❤ browny"),"SEED"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Octaves").appendField(new Blockly.FieldNumber(2,0),"OCTAVES"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Gain").appendField(new Blockly.FieldNumber(.5,0),"GAIN"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Scale").appendField(new Blockly.FieldNumber(1,0),"SCALE"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Power").appendField(new Blockly.FieldNumber(1,0),"POWER"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Dither").appendField(new Blockly.FieldNumber(.03,0),"DITHER"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Lacunarity").appendField(new Blockly.FieldNumber(2,0),"LACUNARITY"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Threshold").appendField(new Blockly.FieldNumber(0,0),"THRESHOLD"),this.setOutput(!0,null),this.setColour(20),this.setTooltip(""),this.setHelpUrl("http://www.example.com/")}},Blockly.Blocks.rfbm_noise={init:function(){this.appendDummyInput().setAlign(Blockly.ALIGN_CENTRE).appendField("Ridged FBM noise"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Seed").appendField(new Blockly.FieldTextInput("I ❤ browny"),"SEED"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Octaves").appendField(new Blockly.FieldNumber(2,0),"OCTAVES"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Gain").appendField(new Blockly.FieldNumber(.5,0),"GAIN"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Scale").appendField(new Blockly.FieldNumber(1,0),"SCALE"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Offset").appendField(new Blockly.FieldNumber(1,0),"OFFSET"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Power").appendField(new Blockly.FieldNumber(1,0),"POWER"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Dither").appendField(new Blockly.FieldNumber(.03,0),"DITHER"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Lacunarity").appendField(new Blockly.FieldNumber(2,0),"LACUNARITY"),this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Threshold").appendField(new Blockly.FieldNumber(0,0),"THRESHOLD"),this.setOutput(!0,null),this.setColour(20),this.setTooltip(""),this.setHelpUrl("http://www.example.com/")}};

},{}],3:[function(require,module,exports){
!function(n,r){function t(t,c,s){var v=[];c=1==c?{entropy:!0}:c||{};var m=u(i(c.entropy?[t,f(n)]:null==t?a():t,3),v),j=new e(v),S=function(){for(var n=j.g(p),r=g,t=0;n<y;)n=(n+t)*l,r*=l,t=j.g(1);for(;n>=h;)n/=2,r/=2,t>>>=1;return(n+t)/r};return S.int32=function(){return 0|j.g(4)},S.quick=function(){return j.g(4)/4294967296},S.double=S,u(f(j.S),n),(c.pass||s||function(n,t,e,i){return i&&(i.S&&o(i,j),n.state=function(){return o(j,{})}),e?(r[d]=n,t):n})(S,m,"global"in c?c.global:this==r,c.state)}function e(n){var r,t=n.length,e=this,o=0,i=e.i=e.j=0,u=e.S=[];for(t||(n=[t++]);o<l;)u[o]=o++;for(o=0;o<l;o++)u[o]=u[i=v&i+n[o%t]+(r=u[o])],u[i]=r;(e.g=function(n){for(var r,t=0,o=e.i,i=e.j,u=e.S;n--;)r=u[o=v&o+1],t=t*l+u[v&(u[o]=u[i=v&i+r])+(u[i]=r)];return e.i=o,e.j=i,t})(l)}function o(n,r){return r.i=n.i,r.j=n.j,r.S=n.S.slice(),r}function i(n,r){var t,e=[],o=typeof n;if(r&&"object"==o)for(t in n)try{e.push(i(n[t],r-1))}catch(n){}return e.length?e:"string"==o?n:n+"\0"}function u(n,r){for(var t,e=n+"",o=0;o<e.length;)r[v&o]=v&(t^=19*r[v&o])+e.charCodeAt(o++);return f(r)}function a(){try{var r;return c&&(r=c.randomBytes)?r=r(l):(r=new Uint8Array(l),(s.crypto||s.msCrypto).getRandomValues(r)),f(r)}catch(r){var t=s.navigator,e=t&&t.plugins;return[+new Date,s,e,s.screen,f(n)]}}function f(n){return String.fromCharCode.apply(0,n)}var c,s=this,l=256,p=6,d="random",g=r.pow(l,p),y=r.pow(2,52),h=2*y,v=l-1;if(r["seed"+d]=t,u(r.random(),n),"object"==typeof module&&module.exports){module.exports=t;try{c=require("crypto")}catch(n){}}else"function"==typeof define&&define.amd&&define(function(){return t})}([],Math);
},{"crypto":4}],4:[function(require,module,exports){

},{}],5:[function(require,module,exports){
var __extends=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var a in r)r.hasOwnProperty(a)&&(e[a]=r[a]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},seedrandom=require("./bower_components/seedrandom/seedrandom.min.js"),NoiseData=function(){function e(e){for(var r=[[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0],[1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1],[0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1],[1,1,0],[0,-1,1],[-1,1,0],[0,-1,-1]],t=new Array(513),a=0;a<256;++a)t[a]=a;for(var i=seedrandom(e),a=0;a<256;++a){var s=Math.floor(256*i()),n=t[a];t[a]=t[s],t[s]=n}for(var a=0;a<256;++a)t[256+a]=t[a];t[512]=t[0],this.permutations=new Uint8Array(262144);for(var o=this.permutations,u=0,d=0;u<256;++u)for(var l=0;l<256;++l,d+=4){var p=t[l];o[d+0]=t[p+u],o[d+1]=t[p+u+1];var h=t[l+1];o[d+2]=t[h+u],o[d+3]=t[h+u+1]}this.gradients=new Uint8Array(768);for(var T=this.gradients,a=0,d=0;a<256;++a,d+=3){var v=15&t[a],E=new THREE.Vector3(r[v][0],r[v][1],r[v][2]);E.normalize(),E.multiplyScalar(.5),E.addScalar(.5),T[d+0]=Math.floor(255*E.x),T[d+1]=Math.floor(255*E.y),T[d+2]=Math.floor(255*E.z)}}return e}(),NoiseTextures=function(){function e(e){this.noiseData=new NoiseData(e),this.permTexture=new THREE.DataTexture(this.noiseData.permutations,256,256,THREE.RGBAFormat,THREE.UnsignedByteType,THREE.UVMapping,THREE.RepeatWrapping,THREE.RepeatWrapping,THREE.LinearFilter,THREE.LinearFilter),this.permTexture.anisotropy=1,this.permTexture.needsUpdate=!0,this.permTexture.generateMipmaps=!1,this.gradTexture=new THREE.DataTexture(this.noiseData.gradients,256,1,THREE.RGBFormat,THREE.UnsignedByteType,THREE.UVMapping,THREE.RepeatWrapping,THREE.RepeatWrapping,THREE.LinearFilter,THREE.LinearFilter),this.gradTexture.anisotropy=1,this.gradTexture.needsUpdate=!0,this.gradTexture.generateMipmaps=!1}return e}();require("./shaders/noise.vs"),require("./shaders/noise_fbm.fs"),require("./shaders/noise_ridged.fs");var FBMNoiseMaterial=function(e){function r(r,t,a,i,s,n,o,u,d,l){this.textures=new NoiseTextures(r),e.call(this,{uniforms:{permTexture:{value:this.textures.permTexture},gradTexture:{value:this.textures.gradTexture},ditherAmt:{value:i},gain:{value:s},innerColor:{value:t},lacunarity:{value:n},octaves:{value:o},outerColor:{value:a},powerAmt:{value:u},shelfAmt:{value:d},noiseScale:{value:l}},vertexShader:require("./shaders/noise.vs")(),fragmentShader:require("./shaders/noise_fbm.fs")(),side:THREE.BackSide,transparent:!0,depthTest:!1,depthWrite:!1})}return __extends(r,e),r}(THREE.ShaderMaterial);exports.FBMNoiseMaterial=FBMNoiseMaterial;var RidgedFBMNoiseMaterial=function(e){function r(r,t,a,i,s,n,o,u,d,l,p){this.textures=new NoiseTextures(r),e.call(this,{uniforms:{permTexture:{value:this.textures.permTexture},gradTexture:{value:this.textures.gradTexture},ditherAmt:{value:i},gain:{value:s},innerColor:{value:t},lacunarity:{value:n},offset:{value:o},octaves:{value:u},outerColor:{value:a},powerAmt:{value:d},shelfAmt:{value:l},noiseScale:{value:p}},vertexShader:require("./shaders/noise.vs")(),fragmentShader:require("./shaders/noise_ridged.fs")(),side:THREE.BackSide,transparent:!0,depthTest:!1,depthWrite:!1})}return __extends(r,e),r}(THREE.ShaderMaterial);exports.RidgedFBMNoiseMaterial=RidgedFBMNoiseMaterial;

},{"./bower_components/seedrandom/seedrandom.min.js":3,"./shaders/noise.vs":8,"./shaders/noise_fbm.fs":9,"./shaders/noise_ridged.fs":10}],6:[function(require,module,exports){
var __extends=this&&this.__extends||function(e,t){function o(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)},seedrandom=require("./bower_components/seedrandom/seedrandom.min.js"),Points=function(e){function t(t,o,r,n,s,i){for(var a=new THREE.Geometry,p=seedrandom(o),d=0;d<r;++d){var c=t.sample();a.vertices.push(c),a.colors.push(i.clone().lerp(s,p()))}e.call(this,a,new THREE.PointsMaterial({size:n,vertexColors:THREE.VertexColors,side:THREE.BackSide,transparent:!0,depthTest:!1,depthWrite:!1}))}return __extends(t,e),t}(THREE.Points);exports.Points=Points;

},{"./bower_components/seedrandom/seedrandom.min.js":3}],7:[function(require,module,exports){
var seedrandom=require("./bower_components/seedrandom/seedrandom.min.js"),UniformSampler=function(){function e(e){this.rand=seedrandom(e)}return e.prototype.sample=function(){var e=2*Math.PI*this.rand(),r=2*this.rand()-1,t=Math.sqrt(1-r*r);return new THREE.Vector3(t*Math.cos(e),t*Math.sin(e),r)},e}();exports.UniformSampler=UniformSampler;var CubeMaterialSampler=function(){function e(r,t,a,n,o,i){void 0===a&&(a=512),this.maskSize=a,this.faces=e.RenderFaces(r,t,a),this.rand=seedrandom(n),this.threshold=o,this.maxtest=i}return e.prototype.plotSample=function(e,r,t){var a=document.getElementById("debug-canvas-"+(t+1)),n=a.getContext("2d"),o=n.createImageData(1,1),i=o.data;i[0]=255,i[1]=0,i[2]=0,i[3]=255,n.putImageData(o,Math.floor(e*this.maskSize),Math.floor(r*this.maskSize))},e.prototype.sample=function(){for(var r=-1,t=-1,a=1,n=Math.floor(6*this.rand()),o=0;o<this.maxtest;++o){var i=this.rand(),s=this.rand(),d=Math.floor(i*this.maskSize),m=Math.floor(s*this.maskSize),h=this.faces[n][4*(m*this.maskSize+d)]/255;a>h&&(r=i,t=s,a=h);var c=this.rand();if(c*c>h)break}this.plotSample(r,t,n);var u=e.ProjectPoint(r,t,n);return u.normalize(),u},e.RenderFaces=function(e,r,t){var a=new THREE.Scene;e.transparent=!1,a.add(new THREE.Mesh(new THREE.SphereGeometry(1,8,8),e));var n=new THREE.CubeCamera(.1,1e5,t);a.add(n),n.updateCubeMap(r,a);for(var o=r.properties.get(n.renderTarget).__webglFramebuffer,i=r.getContext(),s=i.getParameter(i.FRAMEBUFFER_BINDING),d=[],m=0;m<6;++m){i.bindFramebuffer(i.FRAMEBUFFER,o[m]),d[m]=new Uint8Array(n.renderTarget.width*n.renderTarget.height*4),i.readPixels(0,0,n.renderTarget.width,n.renderTarget.height,i.RGBA,i.UNSIGNED_BYTE,d[m]);var h=document.getElementById("debug-canvas-"+(m+1));h.height=256,h.width=256;h.getContext("2d").putImageData(new ImageData(new Uint8ClampedArray(d[m]),512,512),0,0)}return i.bindFramebuffer(i.FRAMEBUFFER,s),d},e.ProjectPoint=function(e,r,t){switch(e=2*e-1,r=2*r-1,t){case 0:return new THREE.Vector3(1,-r,-e);case 1:return new THREE.Vector3(-1,-r,e);case 2:return new THREE.Vector3(e,1,r);case 3:return new THREE.Vector3(e,-1,-r);case 4:return new THREE.Vector3(e,-r,1);case 5:return new THREE.Vector3(-e,-r,-1)}return new THREE.Vector3},e}();exports.CubeMaterialSampler=CubeMaterialSampler;

},{"./bower_components/seedrandom/seedrandom.min.js":3}],8:[function(require,module,exports){
module.exports=function(n){var e='// Copyright (c) 2016, Sebastien Sydney Robert Bigot \n// All rights reserved. \n// \n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions are met: \n// \n// 1. Redistributions of source code must retain the above copyright notice, this \n//    list of conditions and the following disclaimer. \n// 2. Redistributions in binary form must reproduce the above copyright notice, \n//    this list of conditions and the following disclaimer in the documentation \n//    and/or other materials provided with the distribution. \n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND \n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR \n// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; \n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND \n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS \n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \n// \n// The views and conclusions contained in the software and documentation are those \n// of the authors and should not be interpreted as representing official policies, \n// either expressed or implied, of the FreeBSD Project. \nvarying vec3 vertexPos; \nvoid main() \n{ \n   gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0); \n   vertexPos = normalize(position); \n} \n \n';n=n||{};for(var i in n){var o=new RegExp("{{"+i+"}}","g");e=e.replace(o,n[i])}return e};
},{}],9:[function(require,module,exports){
module.exports=function(n){var e='// Copyright (c) 2016, Sebastien Sydney Robert Bigot \n// All rights reserved. \n// \n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions are met: \n// \n// 1. Redistributions of source code must retain the above copyright notice, this \n//    list of conditions and the following disclaimer. \n// 2. Redistributions in binary form must reproduce the above copyright notice, \n//    this list of conditions and the following disclaimer in the documentation \n//    and/or other materials provided with the distribution. \n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND \n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR \n// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; \n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND \n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS \n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \n// \n// The views and conclusions contained in the software and documentation are those \n// of the authors and should not be interpreted as representing official policies, \n// either expressed or implied, of the FreeBSD Project. \n \nuniform sampler2D permTexture; \nuniform sampler2D gradTexture; // <- sampler1D \nuniform float ditherAmt; \nuniform float gain; \nuniform vec3 innerColor; \nuniform float lacunarity; \nuniform int octaves; \nuniform vec3 outerColor; \nuniform float powerAmt; \nuniform float shelfAmt; \nuniform float noiseScale; \n \nvarying vec3 vertexPos; \n \nvec3 fade(vec3 t)   \n{   \n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0); // new curve \n} \n \nvec4 perm2d(vec2 p)   \n{   \n    return texture2D(permTexture, p);   \n}   \n    \nfloat gradperm(float x, vec3 p)   \n{   \n    vec3 v = texture2D(gradTexture, vec2(x, 0.5)).xyz; // <- texture1D \n    v *= 2.0; \n    v -= 1.0;     \n    return dot(v, p);   \n}  \n \n// noise values returned are between -1.0 and 1.0!!! \nfloat perlinNoise(vec3 p) \n{ \n    vec3 P = mod(floor(p), 256.0);     // FIND UNIT CUBE THAT CONTAINS POINT   \n    p -= floor(p);                      // FIND RELATIVE X,Y,Z OF POINT IN CUBE.   \n    vec3 f = fade(p);                  // COMPUTE FADE CURVES FOR EACH OF X,Y,Z.   \n    \n    P = P / 256.0; \n        \n    // HASH COORDINATES OF THE 8 CUBE CORNERS   \n    vec4 AA = perm2d(P.xy) + P.z;   \n    \n     // AND ADD BLENDED RESULTS FROM 8 CORNERS OF CUBE   \n     return mix( mix( mix( gradperm(AA.x, p ),   \n                              gradperm(AA.z, p + vec3(-1, 0, 0) ), f.x),   \n                        mix( gradperm(AA.y, p + vec3(0, -1, 0) ),   \n                              gradperm(AA.w, p + vec3(-1, -1, 0) ), f.x), f.y),   \n                  mix( mix( gradperm(AA.x+(1.0 / 256.0), p + vec3(0, 0, -1) ),   \n                              gradperm(AA.z+(1.0 / 256.0), p + vec3(-1, 0, -1) ), f.x),   \n                        mix( gradperm(AA.y+(1.0 / 256.0), p + vec3(0, -1, -1) ),   \n                              gradperm(AA.w+(1.0 / 256.0), p + vec3(-1, -1, -1) ), f.x), f.y), f.z); \n} \n \n/* \n * FBM (Fractal Brownian Motion) noise \n */ \nfloat fbmNoise(vec3 vIn, int octaves, float lacunarity, float gain) \n{ \n    vec3 v = vIn; \n     \n    float noiseSum = 0.0; \n    float amplitude = 1.0; \n    float amplitudeSum = 0.0; \n     \n    // make some fbm noise \n    const int kMaxOctave = 20; \n    for( int i = 0; i < kMaxOctave; i++) { \n        // webgl workaround for non-const loop boundary \n        if (i >= octaves) { \n            break; \n        } \n        noiseSum += perlinNoise(v) * amplitude; \n        amplitudeSum += amplitude; \n        amplitude *= gain; \n        v *= lacunarity; \n    } \n     \n    // get noiseSum in range -1..1    \n    return noiseSum / amplitudeSum; \n} \n \nvoid main( void ) \n{ \n    vec3 v = normalize(vertexPos); \n    float noiseSum = fbmNoise(noiseScale * v, octaves, lacunarity, gain); \n \n    // add a crazy amount of dithering noise \n    noiseSum += fbmNoise(v * 10000.0, 2, lacunarity, gain) * ditherAmt; \n \n    // get noiseSum in range 0..1 \n    noiseSum = (noiseSum*0.5) + 0.5; \n     \n    // apply shelf \n    noiseSum = max(0.0,noiseSum - shelfAmt); \n     \n    // scale whatever survives back into 0..1 range \n    noiseSum *= 1.0/(1.0-shelfAmt); \n     \n    // apply optional power function \n    noiseSum = pow(noiseSum,1.0/powerAmt); \n \n    gl_FragColor.rgb = mix(outerColor, innerColor, noiseSum); \n    gl_FragColor.a = noiseSum; \n} \n \n';n=n||{};for(var o in n){var i=new RegExp("{{"+o+"}}","g");e=e.replace(i,n[o])}return e};
},{}],10:[function(require,module,exports){
module.exports=function(n){var e='// Copyright (c) 2016, Sebastien Sydney Robert Bigot \n// All rights reserved. \n// \n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions are met: \n// \n// 1. Redistributions of source code must retain the above copyright notice, this \n//    list of conditions and the following disclaimer. \n// 2. Redistributions in binary form must reproduce the above copyright notice, \n//    this list of conditions and the following disclaimer in the documentation \n//    and/or other materials provided with the distribution. \n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND \n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR \n// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; \n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND \n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS \n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \n// \n// The views and conclusions contained in the software and documentation are those \n// of the authors and should not be interpreted as representing official policies, \n// either expressed or implied, of the FreeBSD Project. \n \nuniform sampler2D permTexture; \nuniform sampler2D gradTexture; // <- sampler1D \nuniform float ditherAmt; \nuniform float gain; \nuniform vec3 innerColor; \nuniform float lacunarity; \nuniform float offset; \nuniform int octaves; \nuniform vec3 outerColor; \nuniform float shelfAmt; \nuniform float powerAmt; \nuniform float noiseScale; \n \nvarying vec3 vertexPos; \nvec3 fade(vec3 t)   \n{   \nreturn t * t * t * (t * (t * 6.0 - 15.0) + 10.0); // new curve \n} \n \nvec4 perm2d(vec2 p)   \n{   \nreturn texture2D(permTexture, p);   \n}   \n \nfloat gradperm(float x, vec3 p)   \n{   \nvec3 v = texture2D(gradTexture, vec2(x, 0.5)).xyz; \nv *= 2.0; \nv -= 1.0;     \nreturn dot(v, p);   \n}  \n \n// noise values returned are between -1.0 and 1.0!!! \nfloat perlinNoise(vec3 p) \n{ \nvec3 P = mod(floor(p), 256.0);     // FIND UNIT CUBE THAT CONTAINS POINT   \np -= floor(p);                      // FIND RELATIVE X,Y,Z OF POINT IN CUBE.   \nvec3 f = fade(p);                  // COMPUTE FADE CURVES FOR EACH OF X,Y,Z.   \n \nP = P / 256.0; \n    \n// HASH COORDINATES OF THE 8 CUBE CORNERS   \nvec4 AA = perm2d(P.xy) + P.z;   \n \n // AND ADD BLENDED RESULTS FROM 8 CORNERS OF CUBE   \n return mix( mix( mix( gradperm(AA.x, p ),   \n                          gradperm(AA.z, p + vec3(-1, 0, 0) ), f.x),   \n                    mix( gradperm(AA.y, p + vec3(0, -1, 0) ),   \n                          gradperm(AA.w, p + vec3(-1, -1, 0) ), f.x), f.y),   \n              mix( mix( gradperm(AA.x+(1.0 / 256.0), p + vec3(0, 0, -1) ),   \n                          gradperm(AA.z+(1.0 / 256.0), p + vec3(-1, 0, -1) ), f.x),   \n                    mix( gradperm(AA.y+(1.0 / 256.0), p + vec3(0, -1, -1) ),   \n                          gradperm(AA.w+(1.0 / 256.0), p + vec3(-1, -1, -1) ), f.x), f.y), f.z); \n} \n \n/* \n* Ridge function for Ridged FBM noise below \n*/ \nfloat ridge(float noiseVal, float offset) \n{ \n  float newVal = offset - abs(noiseVal); \n  return newVal * newVal; \n} \n \n/* \n* Ridged FBM (Fractal Brownian Motion) noise \n*/ \nfloat ridgedFbmNoise(vec3 vIn, int octaves, float lacunarity, float gain, float offset) \n{ \nvec3 v = vIn; \n \nfloat noiseSum = 0.0; \nfloat amplitude = 1.0; \nfloat amplitudeSum = 0.0; \nfloat prev = 1.0; \nfloat n; \n \n// make some ridged fbm noise \nconst int kMaxOctave = 20; \nfor( int i = 0; i < kMaxOctave; i++) { \n    // webgl workaround for non-const loop boundary \n    if (i >= octaves) { \n        break; \n    } \n    n = ridge(perlinNoise(v), offset); \n    noiseSum += n * amplitude * prev; \n    prev = n; \n    amplitudeSum += amplitude; \n    amplitude *= gain; \n    v *= lacunarity; \n} \n \n// get noiseSum in range -1..1     \nreturn noiseSum / amplitudeSum;        \n} \nvoid main( void ) \n{ \nvec3 v = normalize(vertexPos); \nfloat noiseSum = ridgedFbmNoise(noiseScale * v, octaves, lacunarity, gain, offset); \n \n// add a crazy amount of dithering noise \nnoiseSum += ridgedFbmNoise(v * 10000.0, octaves, lacunarity, gain, offset) * ditherAmt; \n \n// get noiseSum in range 0..1 \nnoiseSum = (noiseSum*0.5) + 0.5; \n \n// apply shelf \nnoiseSum = max(0.0,noiseSum - shelfAmt); \n \n// scale whatever survives back into 0..1 range \nnoiseSum *= 1.0/(1.0-shelfAmt); \n \n// apply optional power function \nnoiseSum = pow(noiseSum,1.0/powerAmt); \n \ngl_FragColor.rgb = mix(outerColor, innerColor, noiseSum); \ngl_FragColor.a = noiseSum; \n} \n';n=n||{};for(var o in n){var i=new RegExp("{{"+o+"}}","g");e=e.replace(i,n[o])}return e};
},{}],11:[function(require,module,exports){
function getSampler(e,r){var l=e.getInputTargetBlock("MASK");if(l){var n=Layers[l.type](l,new THREE.Color("black"),new THREE.Color("white"));return new sampler_1.CubeMaterialSampler(n,renderer,512,r,.1,10)}return new sampler_1.UniformSampler(r)}function getRootBlock(){for(var e,r=workspace.getTopBlocks(!1),l=0;e=r[l];l++)if("starsystem"==e.type)return e;return null}function updateScene(){scene=new THREE.Scene,scene.add(camera);for(var e=getRootBlock(),r=e.getInputTargetBlock("Layers"),l=!0;r;r=r.nextConnection&&r.nextConnection.targetBlock())if(!r.disabled){var n=Layers[r.type](r);n&&(l&&(l=!1),scene.add(n))}var t=Blockly.Xml.workspaceToDom(workspace),o=Blockly.Xml.domToText(t);console.log(o)}function doResize(){var e=document;if(e.mozFullScreenElement||e.webkitFullscreenElement)renderer.setSize(window.innerWidth,window.innerHeight),camera.updateProjectionMatrix();else{var r=view.offsetWidth,l=window.innerHeight-document.getElementById("header").offsetHeight;r*=.95,l*=.95,renderer.setSize(r,l),blockly.style.height=l+"px",Blockly.svgResize(workspace),camera.updateProjectionMatrix()}}function toggleFullScreen(){var e=document;if(e.mozFullScreenElement||e.webkitFullscreenElement)e.mozCancelFullScreen?e.mozCancelFullScreen():e.webkitExitFullscreen();else{var r=renderer.domElement;r.mozRequestFullScreen?r.mozRequestFullScreen():r.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT)}}var seedrandom=require("./bower_components/seedrandom/seedrandom.min.js");require("./blocks");var points_1=require("./points"),noise_1=require("./noise"),sampler_1=require("./sampler"),billboard_1=require("./billboard"),renderer,camera,controls,scene=new THREE.Scene,bboards,Layers=[];Layers.nebula=function(e){scene=new THREE.Scene,scene.add(camera),Blockly.JavaScript.statementToCode(e,"Layers")},Layers.gas=function(e){var r=e.getInputTargetBlock("MIX");return r?new THREE.Mesh(new THREE.SphereGeometry(1,8,8),Layers[r.type](r,new THREE.Color(e.getFieldValue("INNER_COLOR")),new THREE.Color(e.getFieldValue("OUTER_COLOR")))):null},Layers.dwarf_stars=function(e){var r=e.getFieldValue("SEED");return new points_1.Points(getSampler(e,r),r,Number(e.getFieldValue("CARDINALITY")),Number(e.getFieldValue("SIZE")),new THREE.Color(e.getFieldValue("NEAR_COLOR")),new THREE.Color(e.getFieldValue("FAR_COLOR")))},Layers.giant_stars=function(e){var r=e.getFieldValue("SEED"),l="images/"+e.getFieldValue("TEXTURE")+".png";return new billboard_1.Billboards(r,l,Number(e.getFieldValue("CARDINALITY")),getSampler(e,r),Number(e.getFieldValue("NEAR_SIZE")),Number(e.getFieldValue("FAR_SIZE")),new THREE.Color(e.getFieldValue("NEAR_COLOR")),new THREE.Color(e.getFieldValue("FAR_COLOR")))},Layers.fbm_noise=function(e,r,l){return new noise_1.FBMNoiseMaterial(e.getFieldValue("SEED"),r,l,Number(e.getFieldValue("DITHER")),Number(e.getFieldValue("GAIN")),Number(e.getFieldValue("LACUNARITY")),Number(e.getFieldValue("OCTAVES")),Number(e.getFieldValue("POWER")),Number(e.getFieldValue("THRESHOLD")),Number(e.getFieldValue("SCALE")))},Layers.rfbm_noise=function(e,r,l){return new noise_1.RidgedFBMNoiseMaterial(e.getFieldValue("SEED"),r,l,Number(e.getFieldValue("DITHER")),Number(e.getFieldValue("GAIN")),Number(e.getFieldValue("LACUNARITY")),Number(e.getFieldValue("OFFSET")),Number(e.getFieldValue("OCTAVES")),Number(e.getFieldValue("POWER")),Number(e.getFieldValue("THRESHOLD")),Number(e.getFieldValue("SCALE")))};var view=document.getElementById("stargazer-view"),blockly=document.getElementById("blockly-div"),workspace;window.addEventListener("resize",doResize),window.addEventListener("load",function(){function e(){var l=(new Date).getTime();renderer.render(scene,camera),requestAnimationFrame(e),r=l}document.addEventListener("keydown",function(e){122==e.keyCode&&(e.preventDefault(),toggleFullScreen())},!1),workspace=Blockly.inject("blockly-div",{media:"bower_components/google-blockly/media/",zoom:{controls:!0,wheel:!0,startScale:1,maxScale:3,minScale:.3,scaleSpeed:1.2},toolbox:document.getElementById("blockly-toolbox")}),Blockly.Xml.domToWorkspace(document.getElementById("blockly-startBlocks"),workspace),workspace.addChangeListener(updateScene),workspace.addChangeListener(Blockly.Events.disableOrphans),renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),renderer.setPixelRatio(window.devicePixelRatio),camera=new THREE.PerspectiveCamera(30,1,.1,1e4),camera.position.z=.01,view.appendChild(renderer.domElement),renderer.domElement.style.background="black",renderer.domElement.addEventListener("dblclick",function(e){toggleFullScreen()},!1),controls=new THREE.OrbitControls(camera,renderer.domElement),controls.enablePan=controls.enableZoom=controls.enableKeys=!1,controls.target.set(0,0,0),renderer.setClearColor(new THREE.Color("black"),1);var r=(new Date).getTime();doResize(),requestAnimationFrame(e)});

},{"./billboard":1,"./blocks":2,"./bower_components/seedrandom/seedrandom.min.js":3,"./noise":5,"./points":6,"./sampler":7}]},{},[11]);
